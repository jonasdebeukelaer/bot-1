# Generated by CodiumAI
import os
from src.bot.logger import Logger
import pytest

from src.bot.kucoin_interface import KucoinInterface
from src.bot.typess.PortfolioBreakdown import PortfolioBreakdown


class TestKucoinInterface:

    # can successfully instantiate KucoinInterface class
    def test_instantiate_kucoin_interface(self):
        kucoin = KucoinInterface()
        assert isinstance(kucoin, KucoinInterface)

    # Raises EnvironmentError if KUCOIN_API_KEY environment variable is not set
    def test_raises_environment_error_if_api_key_not_set(self, mocker):
        mocker.patch.dict(os.environ, {"KUCOIN_API_KEY": ""})
        with pytest.raises(EnvironmentError):
            kucoin = KucoinInterface()

    # can successfully get portfolio breakdown
    def test_get_portfolio_breakdown(self):
        # Arrange
        kucoin = KucoinInterface()

        # Act
        portfolio_breakdown = kucoin.get_portfolio_breakdown()

        # Assert
        assert isinstance(portfolio_breakdown, PortfolioBreakdown)

    # can successfully get last trades
    def test_get_last_trades_successfully(self, mocker):
        kucoin = KucoinInterface()
        mocker.patch.object(
            kucoin.trade_client,
            "get_fill_list",
            return_value={
                "items": [
                    {"createdAt": 1634567890000, "side": "buy", "size": "0.01", "symbol": "BTC-GBP", "price": "50000"}
                ]
            },
        )

        trades = kucoin.get_last_trades()

        kucoin.trade_client.get_fill_list.assert_called_once_with(tradeType="TRADE", symbol="BTC-GBP", pageSize=20)
        assert len(trades) == 1
        assert trades[0].endswith("buy 0.01 BTC-GBP at Â£50000")

    # can successfully get part order book
    def test_get_part_order_book_successfully(self):
        # Arrange
        kucoin = KucoinInterface()
        symbol = "BTC-GBP"
        pieces = 20

        # Act
        result = kucoin.get_part_order_book(symbol, pieces)

        # Assert
        assert isinstance(result, dict)
        assert "timestamp" in result
        assert "asks" in result
        assert "bids" in result
        assert len(result["asks"]) == pieces
        assert len(result["bids"]) == pieces

    # can successfully execute trade
    def test_execute_trade_successfully(self, mocker):
        kucoin = KucoinInterface()
        kucoin.get_portfolio_breakdown = mocker.Mock(return_value=PortfolioBreakdown([]))
        kucoin.get_portfolio_breakdown.return_value.get_btc_percentage = mocker.Mock(return_value=40)
        kucoin.trade_client.create_market_order = mocker.Mock()
        kucoin.execute_trade(50000.0, 50.0)
        kucoin.get_portfolio_breakdown.assert_called_once()
        kucoin.trade_client.create_market_order.assert_called_once_with(
            clientOid=mocker.ANY, symbol="BTC-GBP", side=mocker.ANY, size=mocker.ANY
        )

    # can successfully execute buy trade with mocked BTC percentage
    def test_execute_buy_trade_with_mocked_btc_percentage(self, mocker):
        kucoin = KucoinInterface()
        mocker.patch.object(PortfolioBreakdown, "get_btc_percentage", return_value=40)
        mocker.patch.object(kucoin.trade_client, "create_market_order")
        kucoin.get_portfolio_breakdown = mocker.Mock(return_value=PortfolioBreakdown([]))
        kucoin.execute_trade(50000.0, 50.0)
        kucoin.get_portfolio_breakdown.assert_called_once()
        kucoin.trade_client.create_market_order.assert_called_once_with(
            clientOid=mocker.ANY, symbol="BTC-GBP", side="buy", size=mocker.ANY
        )

    # can successfully handle insufficient funds error when executing trade
    def test_handle_insufficient_funds_error(self, mocker):
        kucoin = KucoinInterface()
        mocker.patch.object(PortfolioBreakdown, "get_btc_percentage", return_value=40)
        kucoin.get_portfolio_breakdown = mocker.Mock(return_value=PortfolioBreakdown([]))
        kucoin.get_portfolio_breakdown()  # Call get_portfolio_breakdown method
        kucoin.execute_trade = mocker.Mock(side_effect=Exception("Insufficient funds in KuCoin to execute trade."))

        with pytest.raises(Exception) as e:
            kucoin.execute_trade(50000, 50)

        assert str(e.value) == "Insufficient funds in KuCoin to execute trade."
        kucoin.get_portfolio_breakdown.assert_called_once()
        kucoin.execute_trade.assert_called_once_with(50000, 50)
